function Ks = DesignProcedure1(param)
%DESIGNPROCEDURE1 Summary of this function goes here
%   Returns a control gain based on design procedure 1 (Repport)
%k = zeros(1,3,param.n);

yalmip('clear')

Q = cell(1,param.n);
y = cell(1,param.n);
R = cell(1,param.n);

for i=1:param.n
    Q{i} = sdpvar(3);
    y{i} = sdpvar(1,3,'full');

end
cali_Q = blkdiag(Q{:})
Y = blkdiag(y{:})
%Lyapuanov
constraints = [param.model.A*cali_Q+cali_Q*param.model.A.'+param.model.B_Bar*Y+Y.'*param.model.B_Bar.' <=0]
constraints = [constraints, cali_Q >= 0]

%constraints = []
options = sdpsettings('verbose',0,'solver','mosek');
sol = optimize(constraints,[],options);
check(constraints)

K = double(Y)/double(cali_Q);
eig(param.model.A+param.model.B_Bar*K)
Ks = zeros(1,3,param.n);
for i=1:param.n
    Ks(:,:,i) = K(i,3*(i-1)+1:3*i);
end
Ks

Lambda = zeros(4,4,4);
Psi    = zeros(4,4,4);
Gamma  = zeros(4,4,4);
S      = zeros(4,4,4);
%
for i = 1:4
	[ G2, G3, G4 ] = deal( zeros(4,4) );
	G1          = ones(4,4);
	G2(2:4,2:4) = ones(3,3);
	G3(3:4,3:4) = ones(2,2);
	G4(4,4)     = 1;
	Lambda(:,:,i) = ( param.pipe.r(i) - param.pump.a(i) )/param.pump.b(i)*diag([(i==1) (i==2) (i==3) (i==4)]);
	Psi(:,:,i)    = param.pipe.R_c/param.pump.b(i)*ones(4,4);
	Gamma(:,:,i) =  2*param.pipe.R(1)/param.pump.b(i)*G1*(i>0) + ...
									2*param.pipe.R(2)/param.pump.b(i)*G2*(i>1) + ...
									2*param.pipe.R(3)/param.pump.b(i)*G3*(i>2) + ...
									2*param.pipe.R(4)/param.pump.b(i)*G4*(i>3);
	
	S(:,:,i) = Lambda(:,:,i) + Psi(:,:,i) + Gamma(:,:,i);
end

for ii=1:4
  % Compute rho
  rho(ii) = 1/(2*sqrt(param.ctrl.q_OP(:)'*S(:,:,ii)*param.ctrl.q_OP(:)));
  % Compute Df_q
  Df_q(:,ii) = rho(ii)*S(:,:,ii)*param.ctrl.q_OP(:);
end
Dg = inv(Df_q);


B = (model.H_xi(param.ctrl.xi_OP,param)+param.model.G_cali)*Dg;





end

